# .zshrc.customized

# User specific aliases and functions
alias ls='lsd'
alias ll='lsd -l --size short --date "+%a %Y-%m-%d_%H:%M:%S"'
alias la='lsd -a'
alias lrt='lsd -lrth --size short --date "+%a %Y-%m-%d_%H:%M:%S"'
alias lvh='lsd -lvh --size short --date "+%a %Y-%m-%d_%H:%M:%S"'
alias tree='lsd --tree --group-dirs first'
alias rm='trash-put -i'
alias cp='cp -i'
alias mv='mv -i'
alias grep='grep --color=auto'
alias updatedb='sudo gupdatedb --localpaths=/ --prunepaths="/Library /private /System /Volumes" --output=$HOME/.locatedb'
alias locate='glocate --database=$HOME/.locatedb'
alias tar='gtar'
alias sed='gsed'
alias date='gdate'
alias k='kubectl'
alias kctx='kubectx'
alias kns='kubens'
alias watch='watch '
alias ccat='bat --theme="Solarized (dark)" --style=plain'

# LANG
export LANG=en_US.UTF-8

# The plugin manager for kubectl command-line tool
export PATH=$HOME/.krew/bin:$PATH

# Increase history size
export SAVEHIST=1000000000
export HISTSIZE=1000000
export HISTORY_IGNORE="(history*|pwd|ls|ll|la|lrt|lvh|clear|exit)"

# Bind ctrl + space to accept the current suggestion
bindkey '^ ' autosuggest-accept

# NVM
function enable_nvm(){
  export NVM_DIR=$HOME/.nvm
  source /opt/homebrew/opt/nvm/nvm.sh
}

# Anaconda
function enable_conda() {
  source /opt/homebrew/anaconda3/etc/profile.d/conda.sh
}

# Obsidian
function sync_obsidian() {
  cd /Users/damonguo/Workspace/obsidian
  local status_lines=$(git status --porcelain | wc -l)

  if [[ "$status_lines" -eq 0 ]]; then
    echo "INFO: Obsidian on GitHub is up to date"
  else
    echo "INFO: Synchronizing Obsidian to GitHub..."
    git add --all
    git commit -m "docs(sync): sync the local docs with all recent updates"
    git push
    echo "INFO: Done"
  fi
}

# Check current public IP
function publicip(){
  local website_list=(
    ipinfo.io
    checkip.amazonaws.com
    ifconfig.co
    ifconfig.me
    ifconfig.io
  )

  if [[ -n "$HTTP_PROXY" ]]; then
    local message="NOTICE: HTTP_PROXY has been set"
    echo -e "\033[33m${message}\033[0m"
  fi

  local website
  for website in ${website_list[@]}; do
    echo "${website}: $(curl -s ${website})"
  done
}

# Check specific public IP
function checkip(){
  if [[ -n "$HTTP_PROXY" ]]; then
    local message="NOTICE: HTTP_PROXY has been set"
    echo -e "\033[33m${message}\033[0m"
  fi

  curl -s ipinfo.io/$1
}

# Faster change directory up N times
function up(){
  local arg=""
  local num=$1
  local idx
  if [[ ! -z "${num##*[!0-9]*}" ]]; then
    for idx in $(seq 1 $num); do
      arg+="../"
    done
    local cmd="cd ${arg}"
    eval "$cmd;pwd"
  else
    local cmd="cd .."
    eval "$cmd;pwd"
  fi
}

# Generate a random password
function pwrgen(){
  if [[ $1 =~ ^[0-9]+$ ]]; then
    local passwdlen=$1
  else
    local passwdlen=16
  fi

  local passwdstr=$(pwgen -cnsB ${passwdlen} 1)
  local randomnum=$((RANDOM % (passwdlen - 2) + 2))
  local passwdout=$(echo ${passwdstr} | sed "s/./_/$randomnum")
  echo -e "\033[33m${passwdout}\033[0m"
}

# Enable or disable HTTP proxy
typeset -A _proxy_protocols=(
  ["HTTP_PROXY"]="http"
  ["HTTPS_PROXY"]="http"
  ["ALL_PROXY"]="socks5"
)

function proxyon(){
  local socket="127.0.0.1:7890"
  local proxy_type
  for proxy_type in "${(@k)_proxy_protocols}"; do
    export ${proxy_type}=${_proxy_protocols[$proxy_type]}://${socket}
    printenv | /usr/bin/grep -w ${proxy_type}
  done
}

function proxyoff(){
  unset ${(@k)_proxy_protocols}
  echo "unset ${(@k)_proxy_protocols}"
}
